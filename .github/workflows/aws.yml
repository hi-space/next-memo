name: Deploy to Amazon ECS

on:
  push:
    branches: ['main']

env:
  AWS_REGION: ap-northeast-2
  AWS_DEFAULT_REGION: ap-northeast-2
  ECR_REPOSITORY: next-memo
  ECS_SERVICE: next-memos-service
  ECS_CLUSTER: next-memos-cluster
  ECS_TASK_DEFINITION: deploy/task-definition.json
  CONTAINER_NAME: next-memo

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV
          echo "AWS_BEDROCK_REGION=${{ secrets.AWS_BEDROCK_REGION }}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_CLOUDFRONT_URL=${{ secrets.AWS_CLOUDFRONT_URL }}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push the Docker image to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Send Slack notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "🚀 *Next Memo* 배포 완료! :white_check_mark: \n> ECS 서비스 업데이트가 성공적으로 완료되었습니다."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Prepare task definition
        run: |
          envsubst < ${{ env.ECS_TASK_DEFINITION }} > rendered-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: rendered-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  post:
    name: Notify failure on Slack
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send Slack notification
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "❌ *Next Memo* 배포 실패! \n> ECS 서비스 업데이트 중 오류가 발생했습니다."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
